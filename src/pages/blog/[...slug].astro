---
export const prerender = false;

import Layout from '@layouts/Layout.astro';
import Header from '@components/Header.astro';
import Footer from '@components/Footer.astro';
import TableOfContents from '@components/blog/TableOfContents.astro';
import BlogHeader from '@components/blog/BlogHeader.astro';
import { BlogPostService } from '../../services/blog-post.service';
import { getCachedData } from '../../utils/cache';
import '../../styles/blog-post.css';

const { slug } = Astro.params;

if (!slug) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found',
  });
}

const postData = await getCachedData(`blog-post-${slug}`, () => BlogPostService.getPost(slug));

if (!postData) {
  return new Response(null, {
    status: 404,
    statusText: 'Not found',
  });
}

const { content, frontmatter, headings } = postData;
---

<!-- src/pages/blog/[...slug].astro -->
<Layout title={`${frontmatter.title} - Transform Blog`}>
  <Header />

  <main class="blog-main container mx-auto max-w-7xl px-4 pt-8 sm:px-6 sm:pt-12 lg:px-8">
    <div class="relative flex flex-col-reverse gap-8 lg:flex-row lg:items-start">
      <article class="relative z-0 lg:flex-1">
        <BlogHeader
          title={frontmatter.title}
          description={frontmatter.description}
          pubDate={frontmatter.pubDate}
        />

        <div
          class="blog-prose prose prose-lg relative max-w-none prose-headings:scroll-mt-20 prose-a:text-blue-600"
          set:html={content}
        />
      </article>

      <TableOfContents headings={headings} />
    </div>
  </main>
  <Footer />
</Layout>

<script>
  import { initializeTOC } from '../../scripts/toc';
  import {
    capturePageView,
    captureTimeOnPage,
    captureScrollDepth,
    captureBlogEngagement,
    captureClick,
  } from '../../utils/analytics';

  // Initialize when the DOM is fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    initializeTOC();
    const startTime = Date.now();

    // Capture initial blog post page view with additional properties
    capturePageView(window.location.href, {
      page_type: 'blog_post',
      post_title: document.title,
      post_slug: window.location.pathname.split('/').pop(),
    });

    // Capture blog engagement metrics
    const article = document.querySelector('article');
    if (article) {
      captureBlogEngagement({
        title: document.title,
        author: article.querySelector('[data-author]')?.textContent || 'Unknown',
        pubDate: article.querySelector('[data-pubdate]')?.getAttribute('datetime') || '',
        content: article.textContent || '',
      });
    }

    // Track scroll depth with debouncing
    let maxScrollDepth = 0;
    let scrollTimeout: number | null = null;

    document.addEventListener('scroll', () => {
      if (scrollTimeout) {
        window.clearTimeout(scrollTimeout);
      }

      scrollTimeout = window.setTimeout(() => {
        const scrollPercent = Math.round(
          (window.scrollY / (document.documentElement.scrollHeight - window.innerHeight)) * 100,
        );
        const quarterReached = Math.floor(scrollPercent / 25) * 25;
        if (quarterReached > maxScrollDepth) {
          maxScrollDepth = quarterReached;
          captureScrollDepth(maxScrollDepth);
        }
      }, 1000); // Only trigger after 1 second of no scrolling
    });

    // Track time on page when user leaves
    window.addEventListener('beforeunload', () => {
      captureTimeOnPage(startTime);
    });

    // Track TOC link clicks
    document.querySelectorAll('.toc-link').forEach((link) => {
      link.addEventListener('click', (e) => {
        const target = e.currentTarget as HTMLAnchorElement;
        captureClick('toc_link', {
          heading_text: target.textContent || undefined,
          heading_level: target.style.marginLeft ? parseInt(target.style.marginLeft) + 1 : 1,
        });
      });
    });

    // Track mobile TOC toggle
    const mobileToggle = document.querySelector('.mobile-toc-toggle');
    if (mobileToggle) {
      mobileToggle.addEventListener('click', () => {
        captureClick('mobile_toc_toggle', {
          state: mobileToggle.getAttribute('aria-expanded') || undefined,
        });
      });
    }
  });
</script>
