---
import { getCollection } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import Header from '@components/Header.astro';
import Footer from '@components/Footer.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content, headings } = await post.render();
---

<Layout title={`${post.data.title} - Transform`}>
  <Header />

  <main class="container mx-auto px-4 py-12">
    <div class="relative flex flex-col gap-8 lg:flex-row">
      <!-- Sidebar -->
      <aside class="flex-shrink-0 lg:sticky lg:top-4 lg:h-[calc(100vh-2rem)] lg:w-64">
        <div class="h-full rounded-lg bg-white p-4 shadow-sm">
          <h2 class="mb-4 text-lg font-semibold">Table of Contents</h2>
          <nav class="toc-scrollbar max-h-[calc(100vh-10rem)] overflow-y-auto pr-2">
            <div class="space-y-1">
              {
                headings.map((heading) => (
                  <a
                    href={`#${heading.slug}`}
                    style={`margin-left: ${(heading.depth - 1) * 1}rem`}
                    class:list={[
                      'block py-1.5 text-gray-600 transition-colors hover:text-gray-900',
                      'border-l-2 border-transparent pl-3 hover:border-gray-200',
                      {
                        'text-base font-medium': heading.depth === 1,
                        'text-base': heading.depth === 2,
                        'text-sm': heading.depth === 3,
                        'text-sm text-gray-500': heading.depth === 4,
                        'text-sm text-gray-400': heading.depth >= 5,
                      },
                    ]}
                  >
                    {heading.text}
                  </a>
                ))
              }
            </div>
          </nav>
        </div>
      </aside>

      <!-- Main Content -->
      <article class="max-w-prose lg:flex-1">
        <h1 class="mb-4 text-4xl font-bold">{post.data.title}</h1>
        <div class="mb-8 text-gray-600">
          <time datetime={post.data.pubDate.toISOString()}>
            {new Date(post.data.pubDate).toLocaleDateString()}
          </time>
          {post.data.author && ` â€¢ By ${post.data.author}`}
        </div>

        <div class="prose prose-lg">
          <Content />
        </div>
      </article>
    </div>
  </main>

  <Footer />
</Layout>

<script>
  document.querySelectorAll('aside a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener('click', (e) => {
      e.preventDefault();
      const element = document.getElementById(e.currentTarget.getAttribute('href').slice(1));
      element?.scrollIntoView({
        behavior: 'smooth',
      });
    });
  });

  const observerOptions = {
    rootMargin: '0px 0px -40% 0px',
    threshold: 1.0,
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      const id = entry.target.getAttribute('id');
      const tocLink = document.querySelector(`aside a[href="#${id}"]`);

      if (entry.isIntersecting) {
        document.querySelectorAll('aside a').forEach((link) => {
          link.classList.remove('active');
        });
        tocLink?.classList.add('active');

        tocLink?.scrollIntoView({
          behavior: 'smooth',
          block: 'nearest',
          inline: 'start',
        });
      }
    });
  }, observerOptions);

  document.querySelectorAll('h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]').forEach((header) => {
    observer.observe(header);
  });
</script>

<style>
  .toc-scrollbar {
    scrollbar-width: thin;
    scrollbar-color: rgba(0, 0, 0, 0.2) transparent;
  }

  .toc-scrollbar::-webkit-scrollbar {
    width: 4px;
  }

  .toc-scrollbar::-webkit-scrollbar-track {
    background: transparent;
  }

  .toc-scrollbar::-webkit-scrollbar-thumb {
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 2px;
  }

  .toc-scrollbar::-webkit-scrollbar-thumb:hover {
    background-color: rgba(0, 0, 0, 0.3);
  }

  aside a {
    transition: all 0.2s ease-in-out;
    border-radius: 4px;
    display: block;
    text-decoration: none;
  }

  aside a:hover {
    background-color: rgba(0, 0, 0, 0.05);
  }

  aside a.active {
    background-color: rgba(0, 0, 0, 0.05);
    border-left-color: #000 !important;
    color: #000;
  }
</style>
